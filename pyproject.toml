[project]
name = "well-prepared"
version = "0.1.0"
description = "well-prepared is a sleek and intuitive web application designed to simplify organization and planning"
requires-python = ">=3.13"
authors = [{ name = "Christian Assing", email = "chris@ca-net.org" }]
license = { text = "MIT License" }
readme = "README.md"
dependencies = [
    "django>=5.1.5",
    "django-bootstrap-v5",
    "django-environ>=0.12.0",
    "django-htmx>=1.21.0",
    "gunicorn>=23.0.0",
    "psycopg[binary,pool]>=3.2.3",
    "whitenoise>=6.8.2",
]
[tool.uv.sources]
# This version fixes some Django5 compatibility issues
django-bootstrap-v5 = { git = "https://github.com/math-a3k/django-bootstrap-v5.git" }


[dependency-groups]
dev = [
    "mypy>=1.14.1",
 "pytest>=8.3.4",
 "pyyaml>=6.0.2",
 "ruff>=0.9.1",
]

[project.urls]
homepage = "https://github.com/chassing/well-prepared"
repository = "https://github.com/chassing/well-prepared"
documentation = "https://github.com/chassing/well-prepared"
issues = "https://github.com/chassing/well-prepared/issues"

[tool.ruff]
line-length = 88
target-version = 'py313'
src = ["well_prepared"]
extend-exclude = [".local", ".cache"]
fix = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN401",  # Allow typing.Any
    "CPY",     # Missing copyright header
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in nested public class
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D212",    # multi-line-summary-first-line
    "D213",    # multi-line-summary-second-line
    "D4",      # Doc string style
    "E501",    # Line too long
    "EM102",   # f-string in exception
    "RUF012",  # typing.ClassVar
    "PLR0913", # Too many arguments in function definition
    "S101",    # Use of assert detected. Pytest uses assert
    "S404",    # subprocess import
    "TRY003",  # long exception message
    "TRY300",  # try-consider-else
    # pydoclint
    "DOC",
    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",
    # allow commented out code
    "ERA001",
]

[tool.ruff.format]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["well_prepared"]

[tool.mypy]
files = ["well_prepared"]
enable_error_code = ["truthy-bool", "redundant-expr"]
no_implicit_optional = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
